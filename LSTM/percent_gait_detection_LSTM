# In[] Start

from utils import sequence_data_generator as SeqDataGenerator
from utils import tensorflow_lstm_model as GaitLSTM
from tensorflow.python.client import device_lib
from sklearn.preprocessing import MinMaxScaler
import logging, os, time
import tensorflow as tf
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
os.environ["TF_CPP_MIN_LOG_LEVEL"] = "3"
os.environ["CUDA_VISIBLE_DEVICES"] = "0"

tf.get_logger().setLevel(logging.INFO)

DATA = ['Time', 'q', 'qdot',
        'pelv_gyro_x', 'pelv_gyro_y', 'pelv_gyro_z',
        'pelv_acc_x', 'pelv_acc_y', 'pelv_acc_z',
        'leg_gyro_x', 'leg_gyro_y', 'leg_gyro_z',
        'leg_acc_x', 'leg_acc_y', 'leg_acc_z']

FEATURE = ['leg_gyro_x', 'leg_gyro_y', 'leg_gyro_z',
           'leg_acc_x', 'leg_acc_y', 'leg_acc_z']

LABEL = ['Label']

TRAINSET = ['datasets/train_walking_data_exp1.csv', 
            'datasets/train_walking_data_exp2.csv', 
            'datasets/train_walking_data_exp3.csv']
TESTSET  = 'datasets/test_walking_data.csv'

WINDOW = 500

X_train1, Y_train1 = SeqDataGenerator.dataset_generator(TRAINSET[0], FEATURE, LABEL, WINDOW)
X_train2, Y_train2 = SeqDataGenerator.dataset_generator(TRAINSET[1], FEATURE, LABEL, WINDOW)
X_train3, Y_train3 = SeqDataGenerator.dataset_generator(TRAINSET[2], FEATURE, LABEL, WINDOW)

X_train = np.concatenate((X_train1, X_train2, X_train3), axis = 0)
Y_train = np.concatenate((Y_train1, Y_train2, Y_train3), axis = 0)
X_test, Y_test = SeqDataGenerator.dataset_generator(TESTSET, FEATURE, LABEL, WINDOW)

#In[]

print(X_train.shape)
print(Y_train.shape)
print(X_test.shape)
print(Y_test.shape)

# In[] Feature data

# scaler = MinMaxScaler()
# normalized_data = scaler.fit_transform(csv_reader[DATA])
# normalized_data = pd.DataFrame(normalized_data, columns=DATA)

# In[] Sequence dataset

Y_train = tf.one_hot(Y_train, 100)
Y_train = np.reshape(Y_train, (Y_train.shape[0],Y_train.shape[2]))
Y_test = tf.one_hot(Y_test, 100)
Y_test = np.reshape(Y_test, (Y_test.shape[0],Y_test.shape[2]))

print(X_train.shape)
print(Y_train.shape)
print(X_test.shape)
print(Y_test.shape)

# In[] GPU Check

# print(tf.__version__)
# print(device_lib.list_local_devices())
print("Num GPUs Available: ", len(tf.config.list_physical_devices('GPU')))

# In[] Train

if tf.config.list_physical_devices("GPU"):
    strategy = tf.distribute.MirroredStrategy()  # set to MirroredStrategy
    print("Strategy is set to MirroredStrategy")
else:
    strategy = tf.distribute.get_strategy()  # set to the default strategy
    print("Strategy is set to DefaultDistributionStrategy")

with strategy.scope():
    model = GaitLSTM.initialize_lstm_model(X_train)
    model = GaitLSTM.compile_lstm_model(model)
    monitor1 = GaitLSTM.set_monitor_ReduceLROnPlateau()
    monitor2 = GaitLSTM.set_monitor_EarlyStopping()

    model.summary()
    # Fit the model
    time_start = time.localtime()
    print(f"Model startet at: {time_start.tm_hour}:{time_start.tm_min}:{time_start.tm_sec}")
    model_history = GaitLSTM.fit_lstm_model(model, X_train, Y_train, X_test, Y_test, monitor1, monitor2, 100)
    time_end = time.localtime()
    print(f"Model finished at: {time_start.tm_hour}:{time_start.tm_min}:{time_start.tm_sec}")


# In[] Graph

pred = model.predict(X_test)

# print(Y_test.size)
# print(pred.size)

test = np.argmax(Y_test, axis=1)
pred = np.argmax(pred, axis=1)

mse = tf.keras.metrics.mean_squared_error(test, pred)
print(mse)

plt.plot(test)
plt.plot(pred)
plt.title('Model prediction')
plt.xlabel('time')
plt.ylabel('label')
plt.legend(['ground truth', 'prediction'],loc='best')
plt.xlim([0, WINDOW])

plt.show()

#In[] Accuracy

plt.plot(model_history.history['accuracy'])
plt.plot(model_history.history['val_accuracy'])
plt.title('Model accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.legend(['Train', 'Test'], loc='upper left')
plt.show()

#In[] Loss
plt.plot(model_history.history['loss'])
plt.plot(model_history.history['val_loss'])
plt.title('Model loss')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.legend(['Train', 'Test'], loc='upper right')
plt.show()

#In[] Save model
import pickle

model.save(f"models//GaitLSTMModel.h5")

## Save the history
with open(f"models//history.pkl", "wb") as output:
    pickle.dump(model_history.history, output)

## Save the weights only
model.save_weights(filepath=f"models//save_weights/weights") 

## Save the model completely
tf.saved_model.save(model, f"models//GaitLSTM//")
# In[] End